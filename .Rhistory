clusters = list()
for(i in 1:num_clusters){
clusters[[i]] = rmvt(points, sigma[[i]], df = df[1])
}
return(clusters)
}
GHD_DC <- function(num_clusters, mu, p, alpha, sigma, omega, lambda, points = 100) {
clusters = list()
for(i in 1:num_clusters){
clusters[[i]] = rGHD(points, mu[[i]], alpha[[i]], sigma[[i]], omega[[i]], lambda[[i]])
}
return(clusters)
}
RedditData_Vectors <- read.csv("~/Documents/GitHub/CAMCOS/RedditData_Vectors.csv", stringsAsFactors=FALSE)
View(RedditData_Vectors)
RedditData_Vectors = RedditData_Vectors[,-1]
colnames(RedditData_Vectors)
paste("X", 1:300)
paste("X", 1:300, "")
paste("X", 1:300, sep = "")
colnames(RedditData_Vectors) = c(paste("X", 1:300, sep = ""), "Labels")
colnames(RedditData_Vectors)
write_csv(RedditData_Vectors, "RedditData_Vectors.csv")
setwd("~/Documents/GitHub/CAMCOS")
View(RedditData_Vectors)
write_csv(RedditData_Vectors, "RedditData_Vectors.csv")
data = GMV_DC(num_clusters2 = , mu = list(2, 5), sigma = c(2, 2), points = 100)
data = GMV_DC(num_clusters2 = , mu = list(2, 5), sigma = list(2, 2), points = 100)
GMV_DC(num_clusters2 = , mu = list(2, 5), sigma = list(2, 2), points = 100)
data = GMV_DC(num_clusters = 2, mu = list(2, 5), sigma = list(2, 2), points = 100)
data = GMV_DC(num_clusters = 2, mu = list(2, 5), sigma = list(matrix(1, 2, 2), matrix(1, 2, 2)), points = 100)
matrix(1, 2, 2)
?rmvtnorm
library(mvtnorm)
rmvnorm()
?rmvnorm
data = GMV_DC(num_clusters = 2, mu = list(c(2, 2), c(5, 5)), sigma = list(matrix(1, 2, 2), matrix(1, 2, 2)), points = 100)
plot(data)
data
plot(data[[1]])
data = GMV_DC(num_clusters = 2, mu = list(c(2, 3), c(2, 5)), sigma = list(matrix(1, 2, 2), matrix(1, 2, 2)), points = 100)
plot(data[[1]])
data[[1]]
data = GMV_DC(num_clusters = 2, mu = list(c(2, 3), c(2, 5)), sigma = list(matrix(c(1, .2, 5, .2), 2, 2), matrix(1, 2, 2)), points = 100)
matrix(c(1, .2, 5, .2), 2, 2)
data = GMV_DC(num_clusters = 2, mu = list(c(2, 3), c(2, 5)), sigma = list(matrix(c(1, .2, .2, 5), 2, 2), matrix(1, 2, 2)), points = 100)
plot(data[[1]])
points(data[[2]])
data = GMV_DC(num_clusters = 2, mu = list(c(2, 3), c(2, 5)), sigma = list(matrix(c(1, .2, .2, 5), 2, 2), matrix(c(1, .4, .4, 5), 2, 2)), points = 100)
plot(data[[1]])
points(data[[2]])
data = GMV_DC(num_clusters = 2, mu = list(c(2, 3), c(6, 5)), sigma = list(matrix(c(1, .2, .2, 5), 2, 2), matrix(c(1, .4, .4, 5), 2, 2)), points = 100)
plot(data[[1]])
points(data[[2]])
unlist(data)
plot(rbind(data[[1]], data[[2]]))
plot(rbind(data[[1]], data[[2]]), col = c(rep(1, 100), rep(2, 100)))
data = GMV_DC(num_clusters = 2,
mu = list(c(2, 3), c(6, 5), c(-2, 0), c(6, 1), c(0, 0)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),)
points = 100)
data = GMV_DC(num_clusters = 2,
mu = list(c(2, 3), c(6, 5), c(-2, 0), c(6, 1), c(0, 0)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2)),
points = 100)
plot(rbind(data[[1]], data[[2]], data[[3]], data[[4]], data[[5]]), col = c(rep(1, 100), rep(2, 100)))
data = GMV_DC(num_clusters = 5,
mu = list(c(2, 3), c(6, 5), c(-2, 0), c(6, 1), c(0, 0)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2)),
points = 100)
plot(rbind(data[[1]], data[[2]], data[[3]], data[[4]], data[[5]]), col = c(rep(1, 100), rep(2, 100)))
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]
),
col = c(rep(1, 100),
rep(2, 100),
rep(3, 100),
rep(4, 100),
rep(5, 100)
)
)
data = GMV_DC(num_clusters = 5,
mu = list(c(2, 3), c(6, 5), c(-2, 0), c(6, 1), c(0, 0)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2),
matrix(c(1, .4, .4, 5), 2, 2)),
points = 1000)
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]
),
col = c(rep(1, 1000),
rep(2, 1000),
rep(3, 1000),
rep(4, 1000),
rep(5, 1000)
)
)
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, -.4, .-4, 1), 2, 2),
matrix(c(4, .9, .9, 5), 2, 2),
matrix(c(3, .1, .1, 5), 2, 2),
matrix(c(1, .4, .4, 51, 2, 2)),
points = 1000)
data = GMV_DC(num_clusters = 5,
data = GMV_DC(num_clusters = 5,
mu = list(c(0, 0), c(5, 5), c(-5, -5), c(10, 2), c(-10, 0)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, -.4, .-4, 1), 2, 2),
matrix(c(4, .9, .9, 5), 2, 2),
matrix(c(3, .1, .1, 5), 2, 2),
matrix(c(1, .4, .4, 1), 2, 2)),
points = 1000)
data = GMV_DC(num_clusters = 5,
mu = list(c(0, 0), c(5, 5), c(-5, -5), c(10, 2), c(-10, 0)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, -.4, -.4, 1), 2, 2),
matrix(c(4, .9, .9, 5), 2, 2),
matrix(c(3, .1, .1, 5), 2, 2),
matrix(c(1, .4, .4, 1), 2, 2)),
points = 1000)
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]
),
col = c(rep(1, 1000),
rep(2, 1000),
rep(3, 1000),
rep(4, 1000),
rep(5, 1000)
)
)
write_csv(data, "Hard_Normal.csv")
data = as.data.frame(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]))
data
write_csv(data, "Hard_Normal.csv")
data = GMV_DC(num_clusters = 5,
mu = list(c(0, 0), c(10, 10), c(-10, -10), c(20, 4), c(-20, 0)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, -.4, -.4, 1), 2, 2),
matrix(c(4, .9, .9, 5), 2, 2),
matrix(c(3, .1, .1, 5), 2, 2),
matrix(c(1, .4, .4, 1), 2, 2)),
points = 1000)
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]
),
col = c(rep(1, 1000),
rep(2, 1000),
rep(3, 1000),
rep(4, 1000),
rep(5, 1000)
)
)
data = GMV_DC(num_clusters = 5,
mu = list(c(0, 0), c(9, 9), c(-9, -9), c(18, 4), c(-18, 0)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, -.4, -.4, 1), 2, 2),
matrix(c(4, .9, .9, 5), 2, 2),
matrix(c(3, .1, .1, 5), 2, 2),
matrix(c(1, .4, .4, 1), 2, 2)),
points = 1000)
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]
),
col = c(rep(1, 1000),
rep(2, 1000),
rep(3, 1000),
rep(4, 1000),
rep(5, 1000)
)
)
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]),
col = c(rep(1, 1000),
rep(2, 1000),
rep(3, 1000),
rep(4, 1000),
rep(5, 1000))
)
data = as.data.frame(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]))
data = GMV_DC(num_clusters = 5,
mu = list(c(0, 0), c(9, 9), c(-9, -9), c(18, 4), c(-18, 0)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, -.4, -.4, 1), 2, 2),
matrix(c(4, .9, .9, 5), 2, 2),
matrix(c(3, .1, .1, 5), 2, 2),
matrix(c(1, .9, .9, 1), 2, 2)),
points = 1000)
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]),
col = c(rep(1, 1000),
rep(2, 1000),
rep(3, 1000),
rep(4, 1000),
rep(5, 1000))
)
data = GMV_DC(num_clusters = 5,
mu = list(c(0, 0), c(9, 9), c(-9, -9), c(18, 4), c(-18, -2)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, -.4, -.4, 1), 2, 2),
matrix(c(4, .9, .9, 5), 2, 2),
matrix(c(3, .1, .1, 5), 2, 2),
matrix(c(1, .9, .9, 1), 2, 2)),
points = 1000)
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]),
col = c(rep(1, 1000),
rep(2, 1000),
rep(3, 1000),
rep(4, 1000),
rep(5, 1000))
)
data = GMV_DC(num_clusters = 5,
mu = list(c(0, 0), c(9, 9), c(-9, -9), c(18, 4), c(-18, -4)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, -.4, -.4, 1), 2, 2),
matrix(c(4, .9, .9, 5), 2, 2),
matrix(c(3, .1, .1, 5), 2, 2),
matrix(c(1, .9, .9, 1), 2, 2)),
points = 1000)
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]),
col = c(rep(1, 1000),
rep(2, 1000),
rep(3, 1000),
rep(4, 1000),
rep(5, 1000))
)
data = GMV_DC(num_clusters = 5,
mu = list(c(0, 0), c(9, 9), c(-9, -9), c(18, 4), c(-18, -5)),
sigma = list(
matrix(c(1, .2, .2, 5), 2, 2),
matrix(c(1, -.4, -.4, 1), 2, 2),
matrix(c(4, .9, .9, 5), 2, 2),
matrix(c(3, .1, .1, 5), 2, 2),
matrix(c(1, .9, .9, 1), 2, 2)),
points = 1000)
plot(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]),
col = c(rep(1, 1000),
rep(2, 1000),
rep(3, 1000),
rep(4, 1000),
rep(5, 1000))
)
data = as.data.frame(rbind(data[[1]],
data[[2]],
data[[3]],
data[[4]],
data[[5]]))
write_csv(data, "Easy_Normal.csv")
##### DATA CLEAN
Countries14.16 <- read.csv("~/Downloads/Countries14-16.csv", stringsAsFactors=FALSE)
Countries15.17 <- read.csv("~/Downloads/Countries15-17.csv", stringsAsFactors=FALSE)
Countries14.16 = Countries14.16[-c(1, 5, 98,  199, 208, 209, 171),]
Countries15.17 = Countries15.17[-c(1, 5, 98, 198, 208, 207),]
shared = which(!(Countries14.16$Country.of.Birth %in% Countries15.17$Country.of.Birth))
data = data.frame(country = Countries14.16$Country.of.Birth,
X2014 = (Countries14.16$X2014),
X2015 = (Countries14.16$X2015),
X2016 = (Countries15.17$X2016),
X2017 = (Countries15.17$X2017))
data
View(data)
data[,-1] = apply(data[,-1], c(1,2), gsub, pattern = ",", replacement = '')
data$country = as.character(data$country)
data$X2014 = as.numeric(data$X2014)
data$X2015 = as.numeric(data$X2015)
data$X2016 = as.numeric(data$X2016)
data$X2017 = as.numeric(data$X2017)
#misc
data[40,1] = 'China'
data[32,1] = 'Cabo'
data[43,1] = 'Democratic Republic of Congo'
data[44, 1] = "Republic of Congo"
data[97, 1] = "South Korea"
data[171,1] = "Soviet Union"
Clusters = kmeans(data[,-1], 3, nstart = 20)
plot(data[,-1], col = Clusters$cluster)
kmeans.out <- list() # set kmeans.out to be a list
##### DATA CLEAN
Countries14.16 <- read.csv("~/Downloads/Countries14-16.csv", stringsAsFactors=FALSE)
Countries15.17 <- read.csv("~/Downloads/Countries15-17.csv", stringsAsFactors=FALSE)
Countries14.16 = Countries14.16[-c(1, 5, 98,  199, 208, 209, 171),]
Countries15.17 = Countries15.17[-c(1, 5, 98, 198, 208, 207),]
shared = which(!(Countries14.16$Country.of.Birth %in% Countries15.17$Country.of.Birth))
data = data.frame(country = Countries14.16$Country.of.Birth,
X2014 = (Countries14.16$X2014),
X2015 = (Countries14.16$X2015),
X2016 = (Countries15.17$X2016),
X2017 = (Countries15.17$X2017))
data[,-1] = apply(data[,-1], c(1,2), gsub, pattern = ",", replacement = '')
data$country = as.character(data$country)
data$X2014 = as.numeric(data$X2014)
data$X2015 = as.numeric(data$X2015)
data$X2016 = as.numeric(data$X2016)
data$X2017 = as.numeric(data$X2017)
#misc
data[40,1] = 'China'
data[32,1] = 'Cabo'
data[43,1] = 'Democratic Republic of Congo'
data[44, 1] = "Republic of Congo"
data[97, 1] = "South Korea"
data[171,1] = "Soviet Union"
Clusters = kmeans(data[,-1], 3, nstart = 20)
plot(data[,-1], col = Clusters$cluster)
library(WVPlots)
install.packages("WVPlots")
library(WVPlots)
PairPlot(iris,
colnames(iris)[1:4],
"Anderson's Iris Data -- 3 species",
group_var = "Species")
PairPlot(data,
colnames(data)[2:5],
"Anderson's Iris Data -- 3 species",
group_var = "Species")
View(data)
PairPlot(data,
colnames(data)[2:5],
"Anderson's Iris Data -- 3 species",
group_var = "ountry")
PairPlot(data,
colnames(data)[2:5],
"Anderson's Iris Data -- 3 species",
group_var = "country")
Clusters$cluster
data = cbind(data, Clusters$cluster)
colnames(data)[6]
colnames(data)[6] = "Cluster"
PairPlot(data,
colnames(data)[2:5],
"Anderson's Iris Data -- 3 species",
group_var = "Cluster")
class(data$Cluster)
data$Cluster = as.numeric(data$Cluster)
PairPlot(data,
colnames(data)[2:5],
"Anderson's Iris Data -- 3 species",
group_var = "Cluster")
PairPlot
data$Cluster = as.factor(data$Cluster)
PairPlot(data,
colnames(data)[2:5],
"Anderson's Iris Data -- 3 species",
group_var = "Cluster")
s.width
kmeans.out <- list() # set kmeans.out to be a list
s.width <- NULL
dist.mat <- dist(data[,-1])
set.seed(80)
for(g in 2:6){
kmeans.out[[g]] <- kmeans(x=data[,-1],centers=g,nstart=100) # stores the output from kmeans in a list designated by the number of groups
clust.soln <- kmeans.out[[g]]$cluster
s.vals <- silhouette(x=clust.soln,dist=dist.mat)
plot(s.vals)
s.width[g] <- mean(s.vals[,3])
}
s.width
s.width = s.width[-1]
ggplot() + geom_line(aes(x = c(1, 2, 3, 4, 5), y = s.width))
ggplot() + geom_line(aes(x = c(1, 2, 3, 4, 5), y = s.width)) +
geom_point()
ggplot() + geom_line(aes(x = c(1, 2, 3, 4, 5), y = s.width)) +
geom_point(aes(x = c(1, 2, 3, 4, 5), y = s.width))
ggplot() + geom_line(aes(x = c(1, 2, 3, 4, 5), y = s.width)) +
geom_point(aes(x = c(1, 2, 3, 4, 5), y = s.width, color = "red"))
ggplot() + geom_line(aes(x = c(1, 2, 3, 4, 5), y = s.width)) +
geom_point(aes(x = c(1, 2, 3, 4, 5), y = s.width) color = "red")
ggplot() + geom_line(aes(x = c(1, 2, 3, 4, 5), y = s.width)) +
geom_point(aes(x = c(1, 2, 3, 4, 5), y = s.width), color = "red")
ggplot() + geom_line(aes(x = c(1, 2, 3, 4, 5), y = s.width)) +
geom_point(aes(x = c(1, 2, 3, 4, 5), y = s.width), color = "red") +
xlab("Clusters") + ylab("Average Silhouette Width")
library(ape)
library(phangorn)
library(ips)
library(phyclust)
library(e1071)
library(class)
library(caret)
library(beepr)
library(randomForest)
#source('~/Dropbox/Phylogenetic Network References/Tools for Coding/Tree and Cycle Sampling functions.R')
#source('~/Dropbox/Phylogenetic Network References/Tools for Coding/Simulation_Files_Colby/ScoreFile.R')
#source('~/Dropbox/Phylogenetic Network References/Tools for Coding/Simulation_Files_Colby/Functions_DNASimulations.R')
## Goal here: Use knn for first layer classification
## and svm for second layer classification
#PERCENT: tool for fast checking of accuricies (takes a table as an input)
percent <- function(in_table)
{
return(sum(diag(in_table))/sum(in_table))
}
sites_vec = seq(3000, 10000, 1000)
for(i in 1:length(sites_vec)){
nsites = c(sites_vec[i], sites_vec[i])
sites = nsites
size = 3000
KNN.Training = Sample4or3orT(sites, size, minn = .1, maxx = .3, gamma = c(.25, .75))
svm.4cycle= Which4CycleTrainer_Inv(size, nsites,  maxx = .3, minn = .1, gamma = c(.25, .75))
svm.3cycle = Which3CycleTrainer_Inv(size, nsites,  maxx = .3, minn = .1, gamma = c(.25, .75))
svm.tree = WhichTreeTrainer_Inv(size, nsites,  maxx = .3, minn = .1)
Test.Set = SampleAll(sites = nsites, size = 3000, minn=.1, maxx=.3, gamma_range = c(.25, .75))
predictions= TestMixed(Test.Set[,-15], KNN.Training, svm.tree, svm.3cycle, svm.4cycle)
Run6 = table(predictions,Test.Set[,15])
Melted_Run <- melt(Run6)
ggplot(data = Melted_Run, aes(x=Var2, y=predictions, fill=value)) +
geom_tile() + scale_fill_gradient(low = "white", high = "firebrick2") +
ggtitle(paste("acc: ", round(percent(Run6), 4))) +
geom_text(aes(Var2, predictions, label = value), color = "black", size = 2) +
scale_x_discrete(limits = c(1:21)) +
scale_y_discrete(limits = c(1:21)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
xlab("Truth") +
ylab("Predictions")
title = paste("Invariants, Sites = ", sites_vec[i], ", Accuracy = ", round(percent(Run6)), sep = "")
ggsave(filename = title, width = 200, height = 200, path = "C:/Users/sivar/Dropbox/Phylogenetic Network References/Pictures for Paper/repeated sites", units = 'mm', device = "png")
}
PairPlot(data,
colnames(data)[2:5],
"Scatterplot of Clusters",
group_var = "Cluster")
Country.code <- read.csv("~/Downloads/Country code.csv", header=FALSE, stringsAsFactors=FALSE)
Country.code$V2 = trimws(Country.code$V2)
index_cc = which(data$country %in% trimws(Country.code$V2))
for(i in 1:nrow(data)){
if(data[i,1] %in% Country.code$V2)
{
temp = which(data[i,1] == Country.code$V2)
data[i, 6] = Country.code$V1[temp]
}
else{
data[i, 6] = NA
}
}
data[,7] = Clusters$cluster
library(rworldmap)
worldmap = joinCountryData2Map(data, joinCode = 'NAME', nameJoinColumn = 'country', verbose = T)
mapCountryData(worldmap, nameColumnToPlot="V7", catMethod = "categorical",
missingCountryCol = gray(.8), addLegend = F,
mapTitle = "By Birth Country")
data[index1, 1
data[index1, 1]
data[index1, 1]
index1  = which(Clusters$cluster == 1)
index2 = which(Clusters$cluster == 2)
index3 = which(Clusters$cluster == 3)
data[index1, 1]
data[index2, 1]
data[index3, 1]
